# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type CalendarTypeInfo {
  id: Float
  name: String
  nb_team: Float
}

type Club {
  id: ID
  categoryId: ClubCategory
  category: ClubCategory
  name: String
  short_name: String
  indice: String
  site: String
  address: [Venue]
  teams: [ClubTeam]
  members: [PlayerInfo]
}

type ClubCategory {
  id: ID
  name: String
  levels: [Level]
  clubs: [Club]
}

type ClubTeam {
  indice: String
  division: Division
  club: Club
  matches: [MatchResult]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Division {
  id: ID
  serie: String
  calendar_id: Float
  calendardate_id: Float
  first_match_nb: Float
  matches: [MatchResult]
  teams: [ClubTeam]
  level: Level
  category: DivisionCategory
}

type DivisionCategory {
  id: Float
  name: String
  divisions: [Division]
}

type IndividualMatchResult {
  matchNumber: Float
  homePlayer: PlayerInfo
  awayPlayer: PlayerInfo
  homeSets: Float
  awaySets: Float
  homePlayerIndex: Float
  awayPlayerIndex: Float
  sets: [IndividualMatchSets]
}

type IndividualMatchSets {
  setNumber: Float
  homePoints: Float
  awayPoints: Float
  homeWO: Boolean
  awayWO: Boolean
}

type Level {
  id: ID
  name: String
  divisions: [Division]
}

union LoginResults = LoginSuccessful | LoginUnsuccessful

type LoginSuccessful {
  access_token: String
  claims: [String]
}

type LoginUnsuccessful {
  message: String
}

type MatchInfo {
  id: ID
  competition_id: Float
  category: Float
  home_club: Float
  home_score: Float
  end_time: DateTime
}

type MatchPlayerList {
  player: PlayerInfo
  isWalkover: Boolean
  position: Float
  victory: Float
  ranking: String
}

type MatchResult {
  week: Float
  homeScore: Float
  awayScore: Float
  homeSets: Float
  awaySets: Float
  points_home: Float
  points_away: Float
  match_id: ID
  awayTeam: ClubTeam
  homeTeam: ClubTeam
  awayClub: Club
  homeClub: Club
  scoreModified: Boolean
  date: DateTime
  division: Division
  homePlayers: [MatchPlayerList]
  awayPlayers: [MatchPlayerList]
  individualsMatchResults: [IndividualMatchResult]
  score: String
  matchInfo: MatchInfo
  homeCaptain: PlayerInfoOrNot
  awayCaptain: PlayerInfoOrNot
  referee: PlayerInfoOrNot
  roomResponsible: PlayerInfoOrNot
}

type MatchSystem {
  id: ID
  players: [MatchSystemPlayer]
}

type MatchSystemPlayer {
  game_nb: Float
  player_nb: Float
  home_player: Float
  away_player: Float
  game_group: Float
  allow_substitute: String
  matchSystem: MatchSystem
}

type Mutation {
  login(password: String, username: String): LoginResults
}

type NoPlayerIdRegisteredException {
  message: String
}

type PlayerELOHistory {
  date: DateTime
  points: Float
}

type PlayerInfo {
  first_name: String
  last_name: String
  email: String
  emailcc: String
  photo_filename: String
  birthdate: String
  unique_index: ID
  nationalNumber: String
  address: String
  postcode: Float
  nationality: String
  home_phone: String
  office_phone: String
  fax: String
  gsm: String
  club: Club
  elo: Float
  rankings: [PlayerRanking]
  status: String
  eloHistory: [PlayerELOHistory]
}

union PlayerInfoOrNot = PlayerInfo | NoPlayerIdRegisteredException

type PlayerRanking {
  ranking: String
  sex: String
  categoryName: String
  categoryShortName: String
}

type Query {
  club(clubId: String): Club
  clubs: [Club]

  """Returns list of players"""
  players(unique_index: Float): [PlayerInfo]
  level(id: Float!): Level
  levels: [Level]
  divisions: [Division]
  division(divisionId: Float): Division
  teams(clubId: String!): [ClubTeam]
}

type Venue {
  id: ID
  clubId: Club
  name: String
  address: String
  zip: Float
  town: String
  phone: String
  fax: String
  comment: String
}
